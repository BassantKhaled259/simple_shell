#include <main.h> 

#define BUFFER_SIZE 1024 /*add to main.h*/

/**
 *_getline - func takes address of line to fill with char
 *@lineptr : buffer to look up in
 *@length : the length of the buffer
 *@line : address to line will be fill with char
 *@EOB : end of buffer
 *RETURN : number of read char or -1 if error
*/

static char buffer[BUFFER_SIZE];
static size_t bufferindex = 0;
static size_t bufferlength = 0;

{

ssize_t _getline(char **line, size_t length, int position)  /*add to main.h*/
{
    if (lineptr == NULL || length == 0 )
    {
        return (-1);
    }
}
if (*lineptr == NULL || *length == 0)  
{
    *length = BUFFERSIZE;
    *lineptr = malloc(*length);
    if (*lineptr == NULL)
    {
        return (-1);
    }
}
size_t byteRead = 0;  
char *line = *lineptr;
size_t EOB = *linesize; //line capacity

/*enter loop to read buffer != 0 */
while (1)
{
    if (bufferindex >= bufferlength)
    {
        bufferlength = read(position, buffer, BUFFER_SIZE);
        bufferindex = 0;
        if (bufferlength == 0)
        {
            break;
        }
    }
// copy char from buffer to line buffer

while (bufferindex < bufferlength)
{
    if (bytesRead >= EOB -1)
    {
        EOB *= 2;
        char *newline = _realloc(*lineptr, EOB); /*add to main.h*/
        if (newline == NULL)
        { 
            return (-1);
        }
    *lineptr = newline;
    line = *lineprt;
    }
//copy char to line buffer
line[bytesRead++] = buffer[bufferindex++];
if (line[byteRead-1] == '\n')
{
    break;
}  
if (bytesRead > 0 && line [bytesRead - 1] == '\n')
{
    break;
}
}
line[bytesRead] = '\0';
return bytesRead;
}
/*handle func _getline to Read buffers*/

char *line = NULL;
size_t length = 0;
int position = STDIN - FILENO;
ssize_t charsRead;
while ((charsRead = _getline(&line, &length, position) != 1))
{
     printf("line : %s\n", line); 
}
free (line);
return 0;
}
